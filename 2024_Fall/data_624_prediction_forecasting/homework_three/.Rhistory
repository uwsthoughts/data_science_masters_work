mutate(turnover_forecast = inv_box_cox(.mean, lambda = aus_la))
# 9. Calculate accuracy by comparing against actual test set values
ets_accuracy <- ets_forecast_backtransformed %>%
accuracy(aus_test, measures = list(RMSE = RMSE, MAE = MAE, MAPE = MAPE))
ets_fit |>
accuracy()
aus_la <- aus_train %>%
summarise(turnover = sum(turnover_sum)) %>%
features(turnover, features = guerrero) %>%
pull(lambda_guerrero)
aus_box_trans <- aus_train %>%
summarise(turnover = sum(turnover_sum)) %>%
mutate(turnover_bc = box_cox(turnover, lambda = aus_la))
stl_fit_abt <- aus_box_trans %>%
model(STL_turnover = STL(turnover_bc ~ trend() + season(window = "periodic")))
season_adjust <- stl_fit_abt[[1]][[1]]$fit$decomposition %>%
select(Month, season_adjust)
ets_fit <- season_adjust %>%
model(MAM = ETS(season_adjust ~ error("M") + trend("A") + season("N")),
MAdM = ETS(season_adjust ~ error("M") + trend("Ad") + season("N")))
ets_forecast <- ets_fit %>%
forecast(h = "10 years")
ets_forecast %>%
autoplot(season_adjust, level=NULL) +
labs(title = "10 Year Seasonsally Adjusted Aussie Retail Turnover Forecast",
x = "Year",
y = "Adjusted") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
ets_fit |>
accuracy()
aus_la <- aus_train %>%
summarise(turnover = sum(turnover_sum)) %>%
features(turnover, features = guerrero) %>%
pull(lambda_guerrero)
aus_box_trans <- aus_train %>%
summarise(turnover = sum(turnover_sum)) %>%
mutate(turnover_bc = box_cox(turnover, lambda = aus_la))
stl_fit_abt <- aus_box_trans %>%
model(STL_turnover = STL(turnover_bc ~ trend() + season(window = "periodic")))
season_adjust <- stl_fit_abt[[1]][[1]]$fit$decomposition %>%
select(Month, season_adjust)
ets_fit <- season_adjust %>%
model(MAM = ETS(season_adjust ~ error("M") + trend("A") + season("N")),
MAdM = ETS(season_adjust ~ error("M") + trend("Ad") + season("N")))
ets_forecast <- ets_fit %>%
forecast(h = "10 years")
ets_forecast %>%
autoplot(season_adjust, level=NULL) +
labs(title = "10 Year Seasonsally Adjusted Aussie Retail Turnover Forecast",
x = "Year",
y = "Adjusted") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
ets_fit |>
accuracy()
View(ets_fit)
ets_forecast_inv <- ets_forecast %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
accuracy(ets_forecast_inv, aus_test) %>%
filter(.model == "MAdM") %>%
select(RMSE)
ets_forecast_inv <- ets_forecast %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
# Join the test data with the forecast data to ensure the same length
test_forecast_compare <- aus_test %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv, by = "Month")
View(aus_test)
aus_la <- aus_train %>%
summarise(turnover = sum(turnover_sum)) %>%
features(turnover, features = guerrero) %>%
pull(lambda_guerrero)
aus_box_trans <- aus_train %>%
summarise(turnover = sum(turnover_sum)) %>%
mutate(turnover_bc = box_cox(turnover, lambda = aus_la))
stl_fit_abt <- aus_box_trans %>%
model(STL_turnover = STL(turnover_bc ~ trend() + season(window = "periodic")))
season_adjust <- stl_fit_abt[[1]][[1]]$fit$decomposition %>%
select(Month, season_adjust)
ets_fit <- season_adjust %>%
model(MAM = ETS(season_adjust ~ error("M") + trend("A") + season("N")),
MAdM = ETS(season_adjust ~ error("M") + trend("Ad") + season("N")))
ets_forecast <- ets_fit %>%
forecast(h = 96)
ets_forecast %>%
autoplot(season_adjust, level=NULL) +
labs(title = "10 Year Seasonsally Adjusted Aussie Retail Turnover Forecast",
x = "Year",
y = "Adjusted") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
ets_forecast_inv <- ets_forecast %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
accuracy(ets_forecast_inv, aus_test) %>%
filter(.model == "MAdM") %>%
select(RMSE)
view(aus_test)
aus_la <- aus_train %>%
features(turnover_sum, features = guerrero) %>%
pull(lambda_guerrero)
# Apply the Box-Cox transformation to the monthly data
aus_box_trans <- aus_train %>%
mutate(turnover_bc = box_cox(turnover_sum, lambda = aus_la))
# Fit the STL decomposition model on the transformed data
stl_fit_abt <- aus_box_trans %>%
model(STL_turnover = STL(turnover_bc ~ trend() + season(window = "periodic")))
# Extract the seasonally adjusted component
season_adjust <- stl_fit_abt %>%
components() %>%  # Get decomposition components
select(Month, season_adjust)
ets_fit <- season_adjust %>%
model(MAM = ETS(season_adjust ~ error("M") + trend("A") + season("N")),
MAdM = ETS(season_adjust ~ error("M") + trend("Ad") + season("N")))
ets_forecast <- ets_fit %>%
forecast(h = 96)
ets_forecast %>%
autoplot(season_adjust, level=NULL) +
labs(title = "10 Year Seasonsally Adjusted Aussie Retail Turnover Forecast",
x = "Year",
y = "Adjusted") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
aus_la <- aus_train %>%
features(turnover_sum, features = guerrero) %>%
pull(lambda_guerrero)
# Apply the Box-Cox transformation to the monthly data
aus_box_trans <- aus_train %>%
mutate(turnover_bc = box_cox(turnover_sum, lambda = aus_la))
# Fit the STL decomposition model on the transformed data
stl_fit_abt <- aus_box_trans %>%
model(STL_turnover = STL(turnover_bc ~ trend() + season(window = "periodic")))
# Extract the seasonally adjusted component
season_adjust <- stl_fit_abt %>%
components() %>%  # Get decomposition components
select(Month, season_adjust)
ets_fit <- season_adjust %>%
model(MAM = ETS(season_adjust ~ error("M") + trend("A") + season("N")),
MAdM = ETS(season_adjust ~ error("M") + trend("Ad") + season("N")))
ets_forecast <- ets_fit %>%
forecast(h = 96)
ets_forecast %>%
autoplot(season_adjust, level=NULL) +
labs(title = "10 Year Seasonsally Adjusted Aussie Retail Turnover Forecast",
x = "Year",
y = "Adjusted") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
ets_forecast_inv <- ets_forecast %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
accuracy(ets_forecast_inv, aus_test) %>%
filter(.model == "MAdM") %>%
select(RMSE)
knitr::opts_chunk$set(echo = TRUE)
library(fpp3)
library(tidyverse)
library(ggplot2)
library(fable)
library(fabletools)
library(feasts)
library(tsibble)
library(dplyr)
data("aus_livestock")
vict_ets <- aus_livestock |>
filter(Animal == "Pigs", State == "Victoria") |>
model(SES = ETS(Count ~ error("A") + trend("N") + season("N")))
tidy(vict_ets) |>
select(term,estimate) |>
mutate(estimate = round(estimate,6))
etc_forecasting <- vict_ets |>
forecast(h = 4)
meany <- etc_forecasting |>
slice(1) |>
pull(.mean)
std <- augment(vict_ets) |>
pull(.resid) |>
sd()
cat("ANN Model - 95% confidence range: ", meany - 1.96 * std, ",", meany + 1.96 * std, "\n")
r_interval <- etc_forecasting |>
slice(1) |>
hilo(95) |>
pull()
print(r_interval)
data("global_economy")
thai_exports <- global_economy |>
filter(Code == "THA") |>
select(Exports)
autoplot(thai_exports) +
labs(title = "Exports of Tahiland as % of GDP - 1960 to 2017",
x = "Year",
y = "% of GDP") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
thai_cull_ann <- thai_exports |>
model(ANN = ETS(Exports ~ error("A") + trend("N") + season("N")))
thai_ann <- forecast(thai_cull_ann, h = "5 years")
thai_ann %>%
autoplot(thai_exports, level=NULL) +
labs(title = "ETS ANN Forecast for Thailand Exports",
x = "Year",
y = "% of GDP") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
thai_rmse_ann <- accuracy(thai_cull_ann) |>
pull(RMSE)
thai_rmse_ann
thai_cull_aan <- thai_exports |>
model(AAN = ETS(Exports ~ error("A") + trend("A") + season("N")))
thai_aan <- forecast(thai_cull_aan, h = "5 years")
thai_aan %>%
autoplot(thai_exports, level=NULL) +
labs(title = "ETS AAN Forecast for Thailand Exports",
x = "Year",
y = "% of GDP") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
thai_rmse_aan <- accuracy(thai_cull_aan) |>
pull(RMSE)
thai_rmse_aan
thai_cull_aan <- thai_exports |>
model(AAN = ETS(Exports ~ error("A") + trend("A") + season("N")))
thai_aan <- forecast(thai_cull_aan, h = "5 years")
thai_ann <- as_tsibble(thai_ann)
thai_aan <- as_tsibble(thai_aan)
thai_rmse_aan <- accuracy(thai_cull_aan) |>
pull(RMSE)
thai_ann$RMSE <- thai_rmse_ann
thai_aan$RMSE <- thai_rmse_aan
thai_ann <- thai_ann |>
mutate(upper_ci = .mean + 1.96 * RMSE,
lower_ci = .mean - 1.96 * RMSE)
thai_aan <- thai_aan |>
mutate(upper_ci = .mean + 1.96 * RMSE,
lower_ci = .mean - 1.96 * RMSE)
ann_compare <- thai_ann |>
select(.model, Year, .mean, lower_ci, upper_ci)
aan_compare <- thai_aan |>
select(.model, Year, .mean, lower_ci, upper_ci)
comparison <- bind_rows(ann_compare, aan_compare)
print(comparison)
china_gdp_tb <- global_economy |>
filter(Code == "CHN") |>
select(GDP)
china_gdp_tb %>%
autoplot(GDP) +
labs(title = "Chinese GDP in USD - 1960 to 2017",
x = "Year",
y = "USD") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
china_fitter<- china_gdp_tb|>
model(
MAM = ETS(GDP ~ error("M") + trend("A") + season("M")),
MAD = ETS(GDP ~ error("M") + trend("A") + season("D")),
MMMN = ETS(GDP ~ error("M") + trend("M") + season("N")),
MADN = ETS(GDP ~ error("M") + trend("Ad") + season("N")),
BOXLOG = ETS(box_cox(GDP,0)),
)
china_soars <- forecast(china_fitter, h=30)
china_soars %>%
autoplot(china_gdp_tb, level=NULL) +
labs(title = "30 Year Forecast of Multiple Different ETS Models",
x = "Year",
y = "USD") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
data("aus_production")
aus_gas <- aus_production |>
select(Gas)
aus_gas_fit <- aus_gas |>
model(
MAM = ETS(Gas ~ error("M") + trend("A") + season("M")),
MAdM = ETS(Gas ~ error("M") + trend("Ad") + season("M"))
)
aussi_forecast <- forecast(aus_gas_fit, h=15)
aussi_forecast %>%
autoplot(aus_gas, level=NULL) +
autolayer(aussi_forecast %>% filter(.model == "MAM"),
color = "red",
size = 1,
linetype = "dashed",
level = NULL) +
autolayer(aussi_forecast %>% filter(.model == "MAdM"),
color = "blue",
size = 1.5,
linetype = "solid",
alpha = 0.7,
level = NULL) +
labs(title = "1956 to 2010 Australian Quarterly Gas Production with Forecasts",
x = "Year",
y = "Petajoules") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
data("aus_retail")
aus_turnover <- aus_retail %>%
index_by(Month) %>%
summarise(turnover_sum = sum(Turnover))
autoplot(aus_turnover, turnover_sum) +
labs(title = "Monthly Australian Retail Turnover - 1982 to 2018",
x = "Year",
y = "Total Turnover (AUD)") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
aus_fitter <- aus_turnover |>
model(MAM = ETS(turnover_sum ~ error("M") + trend("A") + season("M")),
MAdM = ETS(turnover_sum ~ error("M") + trend("Ad") + season("M")))
turnt_forecast <- forecast(aus_fitter, h=45)
# Plotting the forecast with the original data
autoplot(turnt_forecast, aus_turnover, level=NULL) +
labs(title = "Holt-Winters' Forecast for Australian Retail Turnover",
x = "Year",
y = "Total Turnover") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
aus_fitter |>
accuracy()
aus_fitter |>
components() |>
filter(.model == "MAM") |>
select(remainder) |>
autoplot(.vars = remainder, na.rm = TRUE)
aus_turnover_tester <- aus_turnover %>%
mutate(Month = yearmonth(Month)) %>%
as_tsibble(index = Month)
aus_train <- aus_turnover_tester %>% filter(Month <= yearmonth("2010 Dec"))
aus_test <- aus_turnover_tester %>% filter(Month > yearmonth("2010 Dec"))
aus_fitter_tester <- aus_train |>
model(MAM = ETS(turnover_sum ~ error("M") + trend("A") + season("M")),
MAdM = ETS(turnover_sum ~ error("M") + trend("Ad") + season("M")))
tester_forecast <- forecast(aus_fitter_tester, h = nrow(aus_test))
accuracy(tester_forecast, aus_test) %>%
filter(.model == "MAdM") %>%
select(RMSE)
aus_la <- aus_train %>%
features(turnover_sum, features = guerrero) %>%
pull(lambda_guerrero)
# Apply the Box-Cox transformation to the monthly data
aus_box_trans <- aus_train %>%
mutate(turnover_bc = box_cox(turnover_sum, lambda = aus_la))
# Fit the STL decomposition model on the transformed data
stl_fit_abt <- aus_box_trans %>%
model(STL_turnover = STL(turnover_bc ~ trend() + season(window = "periodic")))
# Extract the seasonally adjusted component
season_adjust <- stl_fit_abt %>%
components() %>%  # Get decomposition components
select(Month, season_adjust)
ets_fit <- season_adjust %>%
model(MAM = ETS(season_adjust ~ error("M") + trend("A") + season("N")),
MAdM = ETS(season_adjust ~ error("M") + trend("Ad") + season("N")))
ets_forecast <- ets_fit %>%
forecast(h = 96)
ets_forecast %>%
autoplot(season_adjust, level=NULL) +
labs(title = "10 Year Seasonsally Adjusted Aussie Retail Turnover Forecast",
x = "Year",
y = "Adjusted") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
ets_forecast_inv <- ets_forecast %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
accuracy(ets_forecast_inv, aus_test) %>%
filter(.model == "MAdM") %>%
select(RMSE)
View(ets_forecast_inv)
ets_forecast_inv <- ets_forecast %>%
filter(.model == "MAdM") %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
accuracy(ets_forecast_inv, aus_test) %>%
select(RMSE)
ets_forecast_inv
ets_forecast_inv <- ets_forecast %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
# Align the forecast data (.mean) with the actual test data (turnover_sum)
test_forecast_compare <- aus_test %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv, by = "Month")
# Ensure the forecast data is correctly transformed back to the original scale
ets_forecast_inv <- ets_forecast %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
# Convert both test and forecast data to tibbles
aus_test_df <- as_tibble(aus_test)
ets_forecast_inv_df <- as_tibble(ets_forecast_inv)
# Align the forecast data (.mean) with the actual test data (turnover_sum)
test_forecast_compare <- aus_test_df %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv_df, by = "Month")
# Calculate RMSE using the .mean column instead of season_adjust
accuracy(test_forecast_compare$.mean, test_forecast_compare$turnover_sum) %>%
select(RMSE)
View(test_forecast_compare)
ets_forecast_inv <- ets_forecast %>%
filter(.model == "MAdM") %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
aus_test_df <- as_tibble(aus_test)
ets_forecast_inv_df <- as_tibble(ets_forecast_inv)
test_forecast_compare <- aus_test_df %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv_df, by = "Month")
accuracy(test_forecast_compare$.mean, test_forecast_compare$turnover_sum) %>%
select(RMSE)
inv_rmse <- sqrt(mean((test_forecast_compare$.mean - test_forecast_compare$turnover_sum)^2))
# Print the RMSE value
inv_rmse
ets_forecast_inv <- ets_forecast %>%
filter(.model == "MAM") %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
aus_test_df <- as_tibble(aus_test)
ets_forecast_inv_df <- as_tibble(ets_forecast_inv)
test_forecast_compare <- aus_test_df %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv_df, by = "Month")
inv_rmse <- sqrt(mean((test_forecast_compare$.mean - test_forecast_compare$turnover_sum)^2))
inv_rmse
ets_forecast_inv <- ets_forecast %>%
filter(.model == "MAM") %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
ets_forecast_madm <- ets_forecast %>%
filter(.model == "MAdM") %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
aus_test_df <- as_tibble(aus_test)
ets_forecast_inv_df <- as_tibble(ets_forecast_inv)
aus_test_madm <- as_tibble(aus_test)
ets_forecast_inv_madm <- as_tibble(ets_forecast_madm)
test_forecast_compare <- aus_test_df %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv_df, by = "Month")
test_forecast_compare_madm <- aus_test_madm %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv_madm, by = "Month")
mam_rmse <- sqrt(mean((test_forecast_compare$.mean - test_forecast_compare$turnover_sum)^2))
madm_rmse <- sqrt(mean((test_forecast_compare_madm$.mean - test_forecast_compare_madm$turnover_sum)^2))
mam_rmse
madm_rmse
aus_turnover_tester <- aus_turnover %>%
mutate(Month = yearmonth(Month)) %>%
as_tsibble(index = Month)
aus_train <- aus_turnover_tester %>% filter(Month <= yearmonth("2010 Dec"))
aus_test <- aus_turnover_tester %>% filter(Month > yearmonth("2010 Dec"))
aus_fitter_tester <- aus_train |>
model(MAM = ETS(turnover_sum ~ error("M") + trend("A") + season("M")),
MAdM = ETS(turnover_sum ~ error("M") + trend("Ad") + season("M")))
tester_forecast <- forecast(aus_fitter_tester, h = nrow(aus_test))
original_rmse < -accuracy(tester_forecast, aus_test) %>%
filter(.model == "MAdM") %>%
select(RMSE)
aus_turnover_tester <- aus_turnover %>%
mutate(Month = yearmonth(Month)) %>%
as_tsibble(index = Month)
aus_train <- aus_turnover_tester %>% filter(Month <= yearmonth("2010 Dec"))
aus_test <- aus_turnover_tester %>% filter(Month > yearmonth("2010 Dec"))
aus_fitter_tester <- aus_train |>
model(MAM = ETS(turnover_sum ~ error("M") + trend("A") + season("M")),
MAdM = ETS(turnover_sum ~ error("M") + trend("Ad") + season("M")))
tester_forecast <- forecast(aus_fitter_tester, h = nrow(aus_test))
original_rmse <- accuracy(tester_forecast, aus_test) %>%
filter(.model == "MAdM") %>%
select(RMSE)
original_rmse
ets_forecast_inv <- ets_forecast %>%
filter(.model == "MAM") %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
ets_forecast_madm <- ets_forecast %>%
filter(.model == "MAdM") %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
aus_test_df <- as_tibble(aus_test)
ets_forecast_inv_df <- as_tibble(ets_forecast_inv)
aus_test_madm <- as_tibble(aus_test)
ets_forecast_inv_madm <- as_tibble(ets_forecast_madm)
test_forecast_compare <- aus_test_df %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv_df, by = "Month")
test_forecast_compare_madm <- aus_test_madm %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv_madm, by = "Month")
mam_rmse <- sqrt(mean((test_forecast_compare$.mean - test_forecast_compare$turnover_sum)^2))
madm_rmse <- sqrt(mean((test_forecast_compare_madm$.mean - test_forecast_compare_madm$turnover_sum)^2))
cat("Original RMSE from from 8.8.E: ", original_rmse, "\n")
class(original_rmse)
aus_turnover_tester <- aus_turnover %>%
mutate(Month = yearmonth(Month)) %>%
as_tsibble(index = Month)
aus_train <- aus_turnover_tester %>% filter(Month <= yearmonth("2010 Dec"))
aus_test <- aus_turnover_tester %>% filter(Month > yearmonth("2010 Dec"))
aus_fitter_tester <- aus_train |>
model(MAM = ETS(turnover_sum ~ error("M") + trend("A") + season("M")),
MAdM = ETS(turnover_sum ~ error("M") + trend("Ad") + season("M")))
tester_forecast <- forecast(aus_fitter_tester, h = nrow(aus_test))
original_rmse <- accuracy(tester_forecast, aus_test) %>%
filter(.model == "MAdM") %>%
pull(RMSE)
original_rmse
ets_forecast_inv <- ets_forecast %>%
filter(.model == "MAM") %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
ets_forecast_madm <- ets_forecast %>%
filter(.model == "MAdM") %>%
mutate(.mean = inv_box_cox(.mean, aus_la))
aus_test_df <- as_tibble(aus_test)
ets_forecast_inv_df <- as_tibble(ets_forecast_inv)
aus_test_madm <- as_tibble(aus_test)
ets_forecast_inv_madm <- as_tibble(ets_forecast_madm)
test_forecast_compare <- aus_test_df %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv_df, by = "Month")
test_forecast_compare_madm <- aus_test_madm %>%
select(Month, turnover_sum) %>%
left_join(ets_forecast_inv_madm, by = "Month")
mam_rmse <- sqrt(mean((test_forecast_compare$.mean - test_forecast_compare$turnover_sum)^2))
madm_rmse <- sqrt(mean((test_forecast_compare_madm$.mean - test_forecast_compare_madm$turnover_sum)^2))
cat("Original RMSE from from 8.8.E: ", original_rmse, "\n")
cat("MAM Model RMSE:", mam_rmse, "\n")
cat("MAdM Model RMSE:", madm_rmse, "\n")
