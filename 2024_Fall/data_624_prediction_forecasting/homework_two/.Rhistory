View(cg_boxcox)
cg_boxcox %>%
autoplot(box_cox) +
ggtitle("Post Box-Cox Transformation")
data("aus_retail")
force(aus_retail)
View(aus_retail)
lambda_values <- aus_retail %>%
features(Turnover, feat_stl)
View(lambda_values)
print(lambda_values %>% select(State, Industry, lambda_guerrero))
help("features")
names(lambda_values)
lambda <- aus_retail %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
# Print the optimal lambda
print(lambda)
aus_retail_transformed <- aus_retail %>%
mutate(Turnover_transformed = box_cox(Turnover, lambda))
lambda_by_state <- aus_retail %>%
group_by(State) %>%
features(Turnover, features = guerrero) %>%
select(State, lambda_guerrero)
aus_retail_with_lambda <- aus_retail %>%
left_join(lambda_by_state, by = "State")
lambda <- aus_retail %>%
summarise(Turnover = sum(Turnover)) %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
aus_retail_transformed <- aus_retail %>%
mutate(Turnover_transformed = box_cox(Turnover, lambda))
aus_retail %>%
autoplot(Turnover) +
ggtitle("Original Turnover")
# Plot the transformed data
aus_retail_transformed %>%
autoplot(Turnover_transformed) +
ggtitle("Box-Cox Transformed Turnover")
aus_retail %>%
autoplot(Turnover) +
ggtitle("Original Turnover")
data("global_economy")
force(global_economy)
View(global_economy)
aus_retail_transformed %>%
ggplot(aes(x = Month, y = Turnover_transformed)) +
geom_line() +
facet_wrap(~ State, scales = "free_y", ncol = 1) +  # Facet by State, stacked vertically
ggtitle("Box-Cox Transformed Turnover by State") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
aus_retail_transformed %>%
ggplot(aes(x = Month, y = Turnover_transformed, color = State)) +
geom_line() +
facet_wrap(~Industry, scales = "free_y") +
labs(title = "Box-Cox Transformed Turnover Data",
y = "Transformed Turnover") +
theme_minimal()
aus_retail_transformed %>%
ggplot(aes(x = Month, y = Turnover_transformed, color = State)) +
geom_line() +
facet_wrap(~Industry, scales = "free_y", ncol = 2) +
labs(title = "Box-Cox Transformed Turnover Data",
y = "Transformed Turnover") +
theme_minimal() +
theme(legend.position = "bottom")
aus_retail_transformed %>%
ggplot(aes(x = Month, y = Turnover_transformed, color = State)) +
geom_line() +
facet_wrap(~Industry, scales = "free_y", ncol = 2) +
labs(title = "Box-Cox Transformed Turnover Data",
y = "Transformed Turnover") +
theme_minimal() +
theme(legend.position = "bottom",
aspect.ratio = 1)
data("aus_production")
force(aus_production)
View(aus_production)
aus_production %>%
filter_index("Tobacco") %>%
autoplot(Tobacco) + labs(title = "Tobacco Production", y = "Tobacco")
aus_production %>%
filter_index("Tobacco") %>%
autoplot(Tobacco) + labs(title = "Tobacco Production", y = "Tobacco") -> plot_original
# Filter based on the time dimension (i.e., 'Quarter' for aus_production)
aus_production %>%
select(Quarter, Tobacco) %>%  # Select relevant columns
autoplot(Tobacco) + labs(title = "Tobacco Production", y = "Tobacco") -> plot_original
aus_production %>%
select(Quarter, Tobacco) %>%  # Select relevant columns
mutate(Tobacco_boxcox = box_cox(Tobacco, features(Tobacco, features = guerrero) %>% pull(lambda_guerrero))) %>%
autoplot(Tobacco_boxcox) + labs(title = "Box-Cox Transformed Tobacco Production", y = "Transformed Tobacco") -> plot_transformed
aus_tob_la <- aus_production %>%
summarise(Tobacco = sum(Tobacco)) %>%
features(Tobacco, features = guerrero) %>%
pull(lambda_guerrero)
aus_tob_boxcox <- aus_production %>%
as_tsibble() %>%
mutate(box_cox = box_cox(Tobacco, lambda = aus_tob_la))  # Change 'Volume' to 'Tobacco'
autoplot(aus_tob_boxcox, box_cox)
autoplot(aus_production, Tobacco) +
labs(title = "Original Tobacco Production", y = "Tobacco")
autoplot(aus_production %>% filter(!is.na(Tobacco)), Tobacco) +
labs(title = "Before Box-Cox",
x = "Year & Quarter",
y = "Tobacco")
aus_tob_boxcox <- aus_production %>%
filter(!is.na(Tobacco)) %>%
as_tsibble() %>%
mutate(box_cox = box_cox(Tobacco, lambda = aus_tob_la))
autoplot(aus_tob_boxcox, box_cox) +
labs(title = "After Box-Cox",
x = "Year & Quarter",
y = "Transformed Tobacco")
# Plot the original Economy class passengers series, filtering out missing values
autoplot(ansett %>%
filter(Origin == "MEL", Destination == "SYD", Class == "Economy", !is.na(Passengers)),
Passengers) +
labs(title = "Before Box-Cox: MEL to SYD Economy Class Passengers",
x = "Year & Month",
y = "Passengers")
data("ansett")
force(ansett)
View(ansett)
unique(ansett$Airports)
# Drop NA values from Passengers column
ansett_na <- ansett %>%
drop_na(Passengers)
# Plot the original data before Box-Cox, filter for MEL-SYD and Economy class
autoplot(ansett_na %>%
filter(Airports == "MEL-SYD", Class == "Economy"), Passengers) +
labs(title = "Before Box-Cox",
x = "Week & Year",
y = "Passengers")
# Compute the Box-Cox transformation lambda
ansett_la <- ansett_na %>%
filter(Airports == "MEL-SYD", Class == "Economy") %>%
summarise(Passengers = sum(Passengers)) %>%
features(Passengers, features = guerrero) %>%
pull(lambda_guerrero)
# Apply the Box-Cox transformation
ansett_boxcox <- ansett_na %>%
filter(Airports == "MEL-SYD", Class == "Economy") %>%
as_tsibble(index = Week_Year) %>%  # Ensure you have a proper time index, e.g., Week_Year
mutate(box_cox = box_cox(Passengers, lambda = ansett_la))
data("pedestrian")
force(pedestrian)
View(pedestrian)
unique(pedestrian$Sensor)
pedestrian_na <- pedestrian %>%
drop_na(Count)
autoplot(pedestrian_na %>%
filter(Sensor == "Southern Cross Station"), Count) +
labs(title = "Before Box-Cox",
x = "Date",
y = "Pedestrian Count")
pedestrian_la <- pedestrian_na %>%
filter(Sensor == "Southern Cross Station") %>%
summarise(Count = sum(Count)) %>%
features(Count, features = guerrero) %>%
pull(lambda_guerrero)
pedestrian_boxcox <- pedestrian_na %>%
filter(Sensor == "Southern Cross Station") %>%
as_tsibble(index = Date) %>%
mutate(box_cox = box_cox(Count, lambda = pedestrian_la))
rlang::last_trace()
# Drop NA values
pedestrian_na <- pedestrian %>%
drop_na(Count)
# Aggregate pedestrian counts by day
pedestrian_daily <- pedestrian_na %>%
filter(Sensor == "Southern Cross Station") %>%
index_by(Date = as.Date(Date_Time)) %>%  # Aggregate by date (day level)
summarise(Count = sum(Count))  # Summing the counts for each day
# Plot the original pedestrian count before Box-Cox
autoplot(pedestrian_daily, Count) +
labs(title = "Before Box-Cox: Pedestrian Counts at Southern Cross Station",
x = "Date",
y = "Pedestrian Count")
# Compute the Box-Cox transformation lambda
pedestrian_la <- pedestrian_daily %>%
summarise(Count = sum(Count)) %>%
features(Count, features = guerrero) %>%
pull(lambda_guerrero)
# Apply the Box-Cox transformation
pedestrian_boxcox <- pedestrian_daily %>%
mutate(box_cox = box_cox(Count, lambda = pedestrian_la))
# Plot the transformed pedestrian counts
autoplot(pedestrian_boxcox, box_cox) +
labs(title = "After Box-Cox: Pedestrian Counts at Southern Cross Station",
x = "Date",
y = "Transformed Pedestrian Count")
gas <- tail(aus_production, 5*4) |> select(Gas)
View(gas)
autoplot(gas) +
ggtitle("Gas Production - Last 5 Years") +
ylab("Gas Production")
help("autoplot")
help(gas)
?? gas
help(Gas)
help("Gas")
?Gas
help("aus_production")
gas_decomp <- decompose(gas, type = "multiplicative")
gas_decomp <- decompose(Gas, type = "multiplicative")
gas_decomp <- decompose(Gas, type = "multiplicative")
gas_decomp <- decompose(gas, type = "multiplicative")
# Convert the data to a tsibble for decomposition
gas_tsibble <- gas |> as_tsibble()
# Perform multiplicative classical decomposition
gas_decomp <- gas_tsibble |>
model(classical_decomposition(Gas, type = "multiplicative"))
# Extract and plot the components: trend-cycle, seasonal, and remainder
components(gas_decomp) |> autoplot() +
ggtitle("Classical Multiplicative Decomposition of Gas Data")
gas |>
as_tsibble() |>
model(classical_decomposition(Gas, type = "multiplicative")) |>
components() |>
autoplot() +
ggtitle("Classical Multiplicative Decomposition of Gas Data")
gas_sadj <- seasadj(gas_decomp)
gas_sadj <- seasadj(gas_decomp)
help("fpp3")
help(seasadj)
? seasadj
install.packages("forecast")
library(forecast)
gas_sadj <- seasadj(gas_decomp)
gas_sadj <- seasadj(gas_decomp)
gas_decomp <- gas |>
as_tsibble() |>
model(classical_decomposition(Gas, type = "multiplicative")) |>
components()
gas_sadj <- seasadj(gas_decomp)
gas_decomp <- gas |>
as_tsibble() |>
model(classical_decomposition(Gas, type = "multiplicative")) |>
components()
# Plot the seasonally adjusted data directly from the components
autoplot(gas_decomp, season_adjust) +
ggtitle("Seasonally Adjusted Gas Data")
# Introduce an outlier (e.g., adding 300 to the first observation)
gas_outlier <- gas |>
mutate(Gas = if_else(row_number() == 12, Gas + 262, Gas))
# Perform classical multiplicative decomposition with the outlier
gas_decomp_outlier <- gas_outlier |>
as_tsibble() |>
model(classical_decomposition(Gas, type = "multiplicative")) |>
components()
# Plot the seasonally adjusted data with the outlier
autoplot(gas_decomp_outlier, season_adjust) +
ggtitle("Seasonally Adjusted Gas Data with Outlier")
# Perform decomposition on original data (for comparison)
gas_decomp <- gas |>
as_tsibble() |>
model(classical_decomposition(Gas, type = "multiplicative")) |>
components()
# Plot the original seasonally adjusted data
autoplot(gas_decomp, season_adjust) +
ggtitle("Original Seasonally Adjusted Gas Data")
n <- nrow(gas)
gas_outlier_middle <- gas |>
mutate(Gas = if_else(row_number() == round(n / 2), Gas + 262, Gas))
gas_outlier_end <- gas |>
mutate(Gas = if_else(row_number() == n - 1, Gas + 262, Gas))
gas_decomp_outlier_middle <- gas_outlier_middle |>
as_tsibble() |>
model(classical_decomposition(Gas, type = "multiplicative")) |>
components()
gas_decomp_outlier_end <- gas_outlier_end |>
as_tsibble() |>
model(classical_decomposition(Gas, type = "multiplicative")) |>
components()
autoplot(gas_decomp_outlier_middle, season_adjust) +
ggtitle("Seasonally Adjusted Data with Outlier in the Middle")
autoplot(gas_decomp_outlier_end, season_adjust) +
ggtitle("Seasonally Adjusted Data with Outlier Near the End")
x11_decomposition <- aus_retail %>%
model(x11 = X_13ARIMA_SEATS(Turnover ~ seats()))
install.packages("seasonal")
library(seasonal)
x11_decomposition <- aus_retail %>%
model(x11 = X_13ARIMA_SEATS(Turnover ~ seats()))
x11_decomposition <- aus_retail %>%
model(x11 = X_13ARIMA_SEATS(Turnover ~ seats()))
aus_retail_filtered <- aus_retail %>%
group_by(State, Industry) %>%
filter(n() >= 36) %>%
ungroup()
# Apply the X-11 decomposition to the filtered dataset
x11_decomposition <- aus_retail_filtered %>%
model(x11 = X_13ARIMA_SEATS(Turnover ~ seats()))
nsw_retail <- aus_retail %>%
filter(State == "New South Wales", Industry == "Total") %>%
select(Month, Turnover)
# Convert to ts object
nsw_retail_ts <- ts(nsw_retail$Turnover, start = c(1982, 4), frequency = 12)
View(aus_retail)
nsw_retail_ts <- nsw_retail %>%
as_tsibble(index = Month) %>%
as.ts()
library(tsibble)
library(dplyr)
nsw_retail <- aus_retail %>%
filter(State == "Tasmania", Industry == "Food retailing") %>%
select(Month, Turnover)
nsw_retail_ts <- ts(nsw_retail$Turnover, start = c(1982, 4), frequency = 12)
x11_decomp <- seas(nsw_retail_ts, x11 = "")
plot(x11_decomp)
View(ansett)
View(aus_production)
library(dbplyr)
library(fpp3)
data("global_economy")
force(global_economy)
View(global_economy)
View(global_economy)
per_cap_gdp <- global_economy %>%
mutate(per_cap_gdp = GDP / Population) %>%
select(Country, Year, per_cap_gdp) %>%
filter(!is.na(per_cap_gdp))
highest_gdp <- per_cap_gdp %>%
index_by(Year) %>%
filter(per_cap_gdp== max(per_cap_gdp)) %>%
select(Year, Country, per_cap_gdp)
highest_gdp <- per_cap_gdp %>%
group_by(Year) %>%
slice_max(order_by = per_cap_gdp, n = 1, with_ties = FALSE) %>%
arrange(Year) %>%
select(Year, Country, per_cap_gdp) %>%
mutate(prev_country = lag(Country)) %>%
filter(is.na(prev_country) | Country != prev_country) %>%
select(-prev_country)
highest_gdp <- per_cap_gdp %>%
index_by(Year) %>%
slice_max(order_by = per_cap_gdp, n = 1, with_ties = FALSE) %>%
arrange(Year) %>%
select(Year, Country, per_cap_gdp) %>%
mutate(prev_country = lag(Country)) %>%
filter(is.na(prev_country) | Country != prev_country) %>%
select(-prev_country)
View(highest_gdp)
ggplot(highest_gdp, aes(x = Year, y = per_cap_gdp, color = Country)) +
geom_step(size = 1.2) +
geom_point(size = 2) +
labs(title = "Step Plot of Highest Per Capita GDP",
x = "Year",
y = "Per Capita GDP",
color = "Country") +
theme_minimal()
ggplot(highest_gdp, aes(x = Year, y = per_cap_gdp, color = Country)) +
geom_step(linewidth = 1.2) +
geom_point(linewidth = 2) +
labs(title = "Step Plot of Highest Per Capita GDP",
x = "Year",
y = "Per Capita GDP",
color = "Country") +
theme_minimal()
ggplot(highest_gdp, aes(x = Year, y = per_cap_gdp, color = Country)) +
labs(title = "Step Plot of Highest Per Capita GDP",
x = "Year",
y = "Per Capita GDP",
color = "Country") +
theme_minimal()
ggplot(highest_gdp, aes(x = Year, y = per_cap_gdp, color = Country)) +
geom_step() +
geom_point() +
labs(title = "Step Plot of Highest Per Capita GDP",
x = "Year",
y = "Per Capita GDP",
color = "Country") +
theme_minimal()
us_gdp <- global_economy %>%
filter(Country == "United States")
p1 <- ggplot(us_gdp, aes(x = Year, y = GDP)) +
geom_line() +
labs(title = "United States GDP", y = "GDP")
ggplot(us_gdp, aes(x = Year, y = GDP)) +
geom_line() +
labs(title = "United States GDP", y = "GDP")
ggplot(us_gdp, aes(x = Year, y = GDP)) +
geom_line() +
scale_y_continuous(labels = comma)
ggplot(us_gdp, aes(x = Year, y = GDP)) +
geom_line() +
format(GDP, scientific = FALSE)
library(scales)
ggplot(us_gdp, aes(x = Year, y = GDP)) +
geom_line() +
scale_y_continuous(labels = comma) +
labs(title = "United Stateds GDP - 1961-2017", y = "Dollars")
ggplot(us_gdp, aes(x = Year, y = GDP)) +
geom_line() +
scale_y_log10() +
labs(title = "Log Scaled United States Yearly GDP - 1961-2017", y = "Dollars")
data("aus_livestock")
aus_livestock %>%
filter(Animal == "Bulls, bullocks and steers", State == "Victoria") %>%
ggplot(aes(x = Month, y = Count)) +
geom_line() +
labs(title = "Slaughter of Victorian Bulls, Bullocks and Steers - July 1976 to December 2018 ", y = "Number Killed")
data("aus_retail")
aus_retail_la <- aus_retail %>%
summarise(Turnover = sum(Turnover)) %>%
features(Turnover, features = guerrero) %>%
pull(lambda_guerrero)
aus_retail %>%
summarise(Turnover = sum(Turnover)) %>%
mutate(Turnover_BoxCox = box_cox(Turnover, lambda = aus_retail_la))
aus_retail %>%
summarise(Turnover = sum(Turnover)) %>%
mutate(lambda_guerrero = features(Turnover, features = guerrero) %>% pull(lambda_guerrero),
Turnover_BoxCox = box_cox(Turnover, lambda = lambda_guerrero)) %>%
ggplot(aes(x = Turnover, y = Turnover_BoxCox)) +
geom_line() +
labs(
title = "Box-Cox Transformation of Aus Retail Turnover",
x = "Original Turnover",
y = "Box-Cox Transformed Turnover"
) +
theme_minimal()
aus_retail_transformed <- aus_retail %>%
summarise(Turnover = sum(Turnover)) %>%
mutate(Turnover_BoxCox = box_cox(Turnover, lambda = aus_retail_la))
# Plot the transformed data
aus_retail_transformed %>%
ggplot(aes(x = Turnover, y = Turnover_BoxCox)) +
geom_line() +
labs(
title = "Box-Cox Transformation of Aus Retail Turnover",
x = "Original Turnover",
y = "Box-Cox Transformed Turnover"
) +
theme_minimal()
majors_csv <- "https://storage.googleapis.com/data_science_masters_files/2024_fall/data_607_data_management/week_three_files/majors-list.csv"
majors_data <- read_csv(url(majors_csv))
library(tidyverse)
majors_csv <- "https://storage.googleapis.com/data_science_masters_files/2024_fall/data_607_data_management/week_three_files/majors-list.csv"
majors_data <- read_csv(url(majors_csv))
View(majors_data)
summarise(majors_data)
majors_data_dropnas <- majors_data %>%
drop_na(majors_data)
library(dplyr)
majors_data %>%
filter(
!is.na(Major),
Major != "N/A",
grepl("DATA|STATISTICS", Major, ignore.case = TRUE)
)
library(knitr)
stats_data_majors <- majors_data %>%
filter(
!is.na(Major),
Major != "N/A",
grepl("DATA|STATISTICS", Major, ignore.case = TRUE)
)
kable(majors_data_filtered, caption = "Majors with 'STATS' or 'DATA' in Title)
View(stats_data_majors)
View(stats_data_majors)
kable(majors_data_filtered, caption = "Majors with 'STATS' or 'DATA' in Title")
stats_data_majors <- majors_data %>%
filter(
!is.na(Major),
Major != "N/A",
grepl("DATA|STATISTICS", Major, ignore.case = TRUE)
)
kable(stats_data_majors, caption = "Majors with 'STATS' or 'DATA' in Title")
# Step 1: Copy the printed output as a string
raw_string_values <- '[1] "bell pepper"  "bilberry"     "blackberry"   "blood orange"
[5] "blueberry"    "cantaloupe"   "chili pepper" "cloudberry"
[9] "elderberry"   "lime"         "lychee"       "mulberry"
[13] "olive"        "salal berry"'
text_clean <- gsub("\\[\\d+\\]", "", text)
# Step 1: Copy the printed output as a string
raw_text <- '[1] "bell pepper"  "bilberry"     "blackberry"   "blood orange"
[5] "blueberry"    "cantaloupe"   "chili pepper" "cloudberry"
[9] "elderberry"   "lime"         "lychee"       "mulberry"
[13] "olive"        "salal berry"'
# Step 2: Remove index labels and newlines
text_clean <- gsub("\\[\\d+\\]", "", raw_text)
text_clean <- gsub("\n", " ", text_clean)
# Step 3: Extract the quoted strings
elements <- regmatches(text_clean, gregexpr('"(.*?)"', text_clean))[[1]]
# Step 4: Remove the quotes
fruits <- gsub('"', '', elements)
# Step 5: Display the vector in c() format
dput(fruits)
fruits_before <- '[1] "bell pepper"  "bilberry"     "blackberry"   "blood orange"
[5] "blueberry"    "cantaloupe"   "chili pepper" "cloudberry"
[9] "elderberry"   "lime"         "lychee"       "mulberry"
[13] "olive"        "salal berry"'
text_clean <- gsub("\\[\\d+\\]", "", raw_text)
text_clean <- gsub("\n", " ", text_clean)
elements <- regmatches(text_clean, gregexpr('"(.*?)"', text_clean))[[1]]
fruits_after <- gsub('"', '', elements)
dput(fruits_after)
dget(fruits_after)
fruits_before_two <- dget(textConnection(fruits_after))
fruits_before <- '[1] "bell pepper"  "bilberry"     "blackberry"   "blood orange"
[5] "blueberry"    "cantaloupe"   "chili pepper" "cloudberry"
[9] "elderberry"   "lime"         "lychee"       "mulberry"
[13] "olive"        "salal berry"'
text_clean <- gsub("\\[\\d+\\]", "", raw_text)
text_clean <- gsub("\n", " ", text_clean)
elements <- regmatches(text_clean, gregexpr('"(.*?)"', text_clean))[[1]]
fruits_after <- gsub('"', '', elements)
dput(fruits_after, file = "fruits_after.R")
fruits_before_two <- dget("fruits_after.R")
fruits_before_two
