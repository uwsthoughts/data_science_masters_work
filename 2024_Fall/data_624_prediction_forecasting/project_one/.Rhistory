x = "Date",
y = "Dollars") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
res_cust_forecast_load$num_month <- factor(month(res_cust_forecast_load$year_month, label = TRUE))
res_cust_forecast_load %>%
filter(!is.na(kwh)) %>%
ggplot(aes(x = year_month, y = kwh, color = num_month)) +
geom_line() +
labs(title = "Each month's KWH trend - 2008 to 2013",
x = "Date",
y = "KWH") +
scale_y_continuous(labels = scales::comma_format()) +
scale_color_manual(values = scales::hue_pal()(12)) +
theme_minimal()
res_cust_forecast_load %>%
filter(!is.na(kwh) & num_month == 'Sep') %>%
ggplot(aes(x = year_month, y = kwh)) +
geom_line(color = "skyblue") +
geom_point() +
geom_text(aes(label = paste(year_month, "\n", scales::comma(kwh))),
vjust = -0.5, hjust = 0.5, size = 3, angle = 0) +
labs(title = "September KWH trend - 2008 to 2013",
x = "Date",
y = "KWH") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
sept_2008 <- 7666970 - ((7666970 - 7583146) / 2)
res_cust_forecast_load$kwh[res_cust_forecast_load$year_month == "2008-09-01"] <- sept_2008
res_na_removed <- res_cust_forecast_load[rowSums(is.na(res_cust_forecast_load)) > 0, ]
cat("Here's where a missing value would be if it existed: /n")
res_na_removed
res_cust_forecast_load %>%
filter(!is.na(kwh) & num_month == 'Jul') %>%
ggplot(aes(x = year_month, y = kwh)) +
geom_line(color = "skyblue") +
geom_point() +
labs(title = "July KWH trend - 2008 to 2013",
x = "Date",
y = "KWH") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
july_min <- res_cust_forecast_load %>%
filter(num_month == 'Jul') %>%
summarise(min_kwh = min(kwh, na.rm = TRUE)) %>%
pull(min_kwh)
cat("The minimum value across all of July values is: \n")
july_min
res_redux <- res_cust_forecast_load %>%
summarise(
total_values = n(),
missing_values = sum(is.na(kwh)),
min_value = min(kwh, na.rm = TRUE),
mean_value = mean(kwh, na.rm = TRUE),
median_value = median(kwh, na.rm = TRUE),
max_value = max(kwh, na.rm = TRUE)
)
cat("Summary stats after all of the above: \n")
res_redux
sturges_kwh <- round(sturges_bin_width(res_cust_forecast_load$kwh),0)
res_cust_forecast_load %>%
ggplot(aes(x = kwh)) +
geom_histogram(binwidth = sturges_kwh,
fill = "skyblue",
color = "black") +
labs(title = "KWH histogram",
x = "KWH",
y = "Counts") +
scale_x_continuous(labels = scales::comma_format())
rest_cust_fd <- res_cust_forecast_load %>%
as_tsibble(index = year_month) %>%
fill_gaps() %>%
mutate(kwh = ifelse(is.na(kwh), mean(kwh, na.rm = TRUE), kwh))
rest_cust_stl <- rest_cust_fd %>%
model(stl = STL(kwh ~ season(window = "periodic")))
rest_cust_stl %>%
components() %>%
autoplot() +
labs(title = "KWH STL decomposition",
x = "Date by month and year",
y = "KWH") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
respower_la <- rest_cust_fd %>%
features(kwh, features = guerrero) %>%
pull(lambda_guerrero)
aus_box_respower <- rest_cust_fd %>%
mutate(respower_bc = box_cox(kwh, lambda = respower_la))
respower_stl <- aus_box_respower %>%
model(kwh_stl = STL(respower_bc ~ trend() + season(window = "periodic")))
respower_season <- respower_stl %>%
components() %>%
select(year_month, season_adjust = season_adjust)
respower_ets <- respower_season %>%
model(MAM = ETS(season_adjust ~ error("M") + trend("A") + season("N")),
MAdM = ETS(season_adjust ~ error("M") + trend("Ad") + season("N")))
restpower_fc <- respower_ets %>%
forecast(h = "12 months")
restpower_fc %>%
autoplot(respower_season, level=NULL) +
labs(title = "12 month seasonally adjusted forecast for residential power use",
x = "Year",
y = "Adjusted KWH") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
rest_cust_fcs <- rest_cust_fd %>%
model(ARIMA(kwh ~ pdq(0,1,1) + PDQ(0,1,1))) %>%
forecast(h = "12 months")
rest_cust_fcs %>%
autoplot(rest_cust_fd) +
labs(title = "12 month seasonally adjusted forecast for residential power use",
x = "Date",
y = "KWH") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
rest_cust_prophet <- res_cust_forecast_load %>%
as_tsibble(index = year_month) %>%
fill_gaps() %>%
as_tibble() %>%
rename(ds = year_month, y = kwh) %>%
mutate(y = ifelse(is.na(y), mean(y, na.rm = TRUE), y))
res_cust_pro <- prophet(rest_cust_prophet)
rc_pro_ft <- make_future_dataframe(res_cust_pro, periods = 12, freq = "month")
rc_prophet_fc <- predict(res_cust_pro, rc_pro_ft)
plot(res_cust_pro, rc_prophet_fc)
cat("\n This is a 12 month prophet forecast")
View(rc_prophet_fc)
install.packages(writeexl)
install.packages(writexl)
install.packages("writexl")
install.packages("openxls")
install.packages("openxlsx")
fc_xls <- createWorkbook()
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(httr)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(fpp3)
library(prophet)
library(fable)
library(openxlsx)
atm_624_url <- "https://storage.googleapis.com/data_science_masters_files/2024_fall/data_624_prediction_forecasting/project_one_files/ATM624Data.xlsx"
GET(atm_624_url, write_disk(tf <- tempfile(fileext = ".xlsx")))
atm_624_data <- read_excel(tf)
atm_624_hold <- read_excel(tf)
residential_customer_url <- "https://storage.googleapis.com/data_science_masters_files/2024_fall/data_624_prediction_forecasting/project_one_files/ResidentialCustomerForecastLoad-624.xlsx"
GET(residential_customer_url, write_disk(tf <- tempfile(fileext = ".xlsx")))
res_cust_forecast_load <- read_excel(tf)
res_cust_forecast_hold <- read_excel(tf)
waterflow_p1_url <- "https://storage.googleapis.com/data_science_masters_files/2024_fall/data_624_prediction_forecasting/project_one_files/Waterflow_Pipe1.xlsx"
GET(waterflow_p1_url, write_disk(tf <- tempfile(fileext = ".xlsx")))
waterflow_pipe1 <- read_excel(tf)
waterflow_p2_url <- "https://storage.googleapis.com/data_science_masters_files/2024_fall/data_624_prediction_forecasting/project_one_files/Waterflow_Pipe2.xlsx"
GET(waterflow_p2_url, write_disk(tf <- tempfile(fileext = ".xlsx")))
waterflow_pipe2 <- read_excel(tf)
glimpse(atm_624_data)
atm_624_data$DATE <- as.Date(atm_624_data$DATE, origin = "1899-12-30")
colnames(atm_624_data) <- tolower(colnames(atm_624_data))
glimpse(atm_624_data)
summary(atm_624_data)
atm_na_subset <- atm_624_data[rowSums(is.na(atm_624_data)) > 0, ]
atm_na_subset
atm_624_data <- atm_624_data[!(is.na(atm_624_data$cash) & is.na(atm_624_data$atm)), ]
cash_na_subset <- atm_624_data[rowSums(is.na(atm_624_data)) > 0, ]
cash_na_subset
atm_624_presum <- atm_624_data %>%
group_by(atm) %>%
summarise(
total_values = n(),
min_value = min(cash, na.rm = TRUE),
mean_value = mean(cash, na.rm = TRUE),
median_value = median(cash, na.rm = TRUE),
max_value = max(cash, na.rm = TRUE)
)
atm_624_presum
sturges_bin_width <- function(x) {
(max(x, na.rm = TRUE) - min(x, na.rm = TRUE)) / (1 + 3.3 * log10(length(x[!is.na(x)])))
}
atm_624_data <- atm_624_data %>%
group_by(atm) %>%
mutate(sturges_bw = sturges_bin_width(cash)) %>%
ungroup()
atm_624_sturges <- atm_624_data %>%
group_by(atm) %>%
summarise(
total_values = n(),
min_value = min(cash, na.rm = TRUE),
mean_value = mean(cash, na.rm = TRUE),
median_value = median(cash, na.rm = TRUE),
max_value = max(cash, na.rm = TRUE),
sturges_bw = first(sturges_bw)
)
atm_624_sturges
sturge_histo <- function(data, atm, binwidth, title) {
data %>%
filter(!is.na(cash)) %>%
filter(atm == !!atm) %>%
ggplot(aes(x = cash)) +
geom_histogram(binwidth = binwidth,
fill = "skyblue",
color = "black") +
labs(title = title,
x = "Cash",
y = "Counts")
}
sturge_histo(atm_624_data, "ATM1", 18, "ATM1 histogram of cash withdrawals")
sturge_histo(atm_624_data, "ATM2", 15, "ATM2 histogram of cash withdrawals")
sturge_histo(atm_624_data, "ATM3", 10, "ATM3 histogram of cash withdrawals")
sturge_histo(atm_624_data, "ATM4", 1154, "ATM4 histogram of cash withdrawals")
atm_624_data %>%
filter(!is.na(cash)) %>%
ggplot(aes(x = date, y = cash)) +
geom_line(color = "skyblue") +
facet_wrap(~atm, ncol = 2, scales = "free_y") +
labs(title = "Daily cash withdrawals",
x = "Date",
y = "Dollars") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
atm_624_data <- atm_624_data[!(atm_624_data$atm == "ATM4" &
atm_624_data$cash > 4 * sort(atm_624_data$cash[atm_624_data$atm == "ATM4"], decreasing = TRUE)[2]), ]
atm_624_outlier <- atm_624_data %>%
group_by(atm) %>%
summarise(
total_values = n(),
min_value = min(cash, na.rm = TRUE),
mean_value = mean(cash, na.rm = TRUE),
median_value = median(cash, na.rm = TRUE),
max_value = max(cash, na.rm = TRUE),
)
cat("Summary data after outlier removal: \n")
atm_624_outlier
cat("I'm now going to return to the NAs from above and implement a strategy. Here they are: \n")
cash_na_subset2 <- atm_624_data[rowSums(is.na(atm_624_data)) > 0, ]
cat("The remaining missing values by ATM are: \n")
cash_na_subset2
atm_624_data <- atm_624_data %>%
group_by(atm) %>%
mutate(cash = ifelse(is.na(cash), median(cash, na.rm = TRUE), cash)) %>%
ungroup()
atm_624_data <- atm_624_data %>%
mutate(full_usd_amt = cash * 100)
cat("Here's a sample of the data after dollars represented as hundreds is coverted to full dollar value: \n")
atm_624_data
atm_624_data %>%
filter(!is.na(cash)) %>%
ggplot(aes(x = date, y = cash)) +
geom_line(color = "skyblue") +
facet_wrap(~atm, ncol = 2, scales = "free_y") +
labs(title = "Daily cash withdrawals",
x = "Date",
y = "Dollars") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
atm1_data <- atm_624_data %>%
filter(atm == "ATM1") %>%
select(date, full_usd_amt) %>%
as_tsibble(index = date)
atm1_stl <- atm1_data %>%
model(stl = STL(full_usd_amt ~ season(window = "periodic")))
atm1_stl %>%
components() %>%
autoplot() +
labs(title = "ATM1 STL decomposition",
x = "Date",
y = "USD") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
atm2_data <- atm_624_data %>%
filter(atm == "ATM2") %>%
select(date, full_usd_amt) %>%
as_tsibble(index = date)
atm2_stl <- atm2_data %>%
model(stl = STL(full_usd_amt ~ season(window = "periodic")))
atm2_stl %>%
components() %>%
autoplot() +
labs(title = "ATM2 STL decomposition",
x = "Date",
y = "USD") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
atm1_fc <- atm1_data %>%
model(ARIMA(full_usd_amt ~ trend() + season())) %>%
forecast(h = "30 days")
atm1_fc %>%
autoplot(atm1_data) +
labs(title = "ATM1 - 30 day ARIMA forecast after STL decomposition",
x = "Date",
y = "USD") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
atm2_fc <- atm2_data %>%
model(ARIMA(full_usd_amt ~ trend() + season())) %>%
forecast(h = "30 days")
atm2_fc %>%
autoplot(atm2_data) +
labs(title = "ATM2 - 30 day ARIMA forecast after STL decomposition",
x = "Date",
y = "USD") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
atm3_data <- atm_624_data %>%
filter(atm == "ATM3") %>%
select(date, full_usd_amt) %>%
as_tsibble(index = date)
atm3_fc <- atm3_data %>%
model(RW(full_usd_amt ~ drift())) %>%
forecast(h = "30 days")
atm3_fc %>%
autoplot(atm3_data) +
labs(title = "ATM3: 30 day Random Walk with Drift forecast",
x = "Date",
y = "USD") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
atm4_data <- atm_624_data %>%
filter(atm == "ATM4") %>%
as_tsibble(index = date) %>%
select(date, full_usd_amt) %>%
fill_gaps() %>%
mutate(full_usd_amt = ifelse(is.na(full_usd_amt), mean(full_usd_amt, na.rm = TRUE), full_usd_amt))
atm4_stl <- atm4_data %>%
model(stl = STL(full_usd_amt ~ season(window = "periodic")))
atm4_stl %>%
components() %>%
autoplot() +
labs(title = "ATM4 STL decomposition",
x = "Date",
y = "USD") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
atm4_fc <- atm4_data %>%
model(ARIMA(full_usd_amt ~ pdq(0,1,1) + PDQ(0,1,1))) %>%
forecast(h = "30 days")
atm4_fc %>%
autoplot(atm4_data) +
labs(title = "ATM4 - 30 day SARIMA forecast after STL decomposition",
x = "Date",
y = "USD") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
cat("Glimise of date:\n")
glimpse(res_cust_forecast_load)
res_intials <- res_cust_forecast_load %>%
summarise(
total_values = n(),
missing_values = sum(is.na(KWH)),
min_value = min(KWH, na.rm = TRUE),
mean_value = mean(KWH, na.rm = TRUE),
median_value = median(KWH, na.rm = TRUE),
max_value = max(KWH, na.rm = TRUE)
)
cat("Initial summary stats before change: \n")
res_intials
res_cust_forecast_load <- res_cust_forecast_load %>%
select(-CaseSequence) %>%
rename(
year_month = `YYYY-MMM`,
kwh = KWH
)
res_cust_forecast_load$year_month <- as.Date(paste0(res_cust_forecast_load$year_month, "-01"), format = "%Y-%b-%d")
cat("Here's a glimpse of the data after the above. Much better :) \n")
glimpse(res_cust_forecast_load)
res_na_init <- res_cust_forecast_load[rowSums(is.na(res_cust_forecast_load)) > 0, ]
cat("The missing value is: /n")
res_na_init
res_cust_forecast_load %>%
filter(!is.na(kwh)) %>%
ggplot(aes(x = year_month, y = kwh)) +
geom_line(color = "skyblue") +
labs(title = "Monthly residential KWH - 1998 to 2013",
x = "Date",
y = "Dollars") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
res_cust_forecast_load$num_month <- factor(month(res_cust_forecast_load$year_month, label = TRUE))
res_cust_forecast_load %>%
filter(!is.na(kwh)) %>%
ggplot(aes(x = year_month, y = kwh, color = num_month)) +
geom_line() +
labs(title = "Each month's KWH trend - 2008 to 2013",
x = "Date",
y = "KWH") +
scale_y_continuous(labels = scales::comma_format()) +
scale_color_manual(values = scales::hue_pal()(12)) +
theme_minimal()
res_cust_forecast_load %>%
filter(!is.na(kwh) & num_month == 'Sep') %>%
ggplot(aes(x = year_month, y = kwh)) +
geom_line(color = "skyblue") +
geom_point() +
geom_text(aes(label = paste(year_month, "\n", scales::comma(kwh))),
vjust = -0.5, hjust = 0.5, size = 3, angle = 0) +
labs(title = "September KWH trend - 2008 to 2013",
x = "Date",
y = "KWH") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
sept_2008 <- 7666970 - ((7666970 - 7583146) / 2)
res_cust_forecast_load$kwh[res_cust_forecast_load$year_month == "2008-09-01"] <- sept_2008
res_na_removed <- res_cust_forecast_load[rowSums(is.na(res_cust_forecast_load)) > 0, ]
cat("Here's where a missing value would be if it existed: /n")
res_na_removed
res_cust_forecast_load %>%
filter(!is.na(kwh) & num_month == 'Jul') %>%
ggplot(aes(x = year_month, y = kwh)) +
geom_line(color = "skyblue") +
geom_point() +
labs(title = "July KWH trend - 2008 to 2013",
x = "Date",
y = "KWH") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
july_min <- res_cust_forecast_load %>%
filter(num_month == 'Jul') %>%
summarise(min_kwh = min(kwh, na.rm = TRUE)) %>%
pull(min_kwh)
cat("The minimum value across all of July values is: \n")
july_min
res_redux <- res_cust_forecast_load %>%
summarise(
total_values = n(),
missing_values = sum(is.na(kwh)),
min_value = min(kwh, na.rm = TRUE),
mean_value = mean(kwh, na.rm = TRUE),
median_value = median(kwh, na.rm = TRUE),
max_value = max(kwh, na.rm = TRUE)
)
cat("Summary stats after all of the above: \n")
res_redux
sturges_kwh <- round(sturges_bin_width(res_cust_forecast_load$kwh),0)
res_cust_forecast_load %>%
ggplot(aes(x = kwh)) +
geom_histogram(binwidth = sturges_kwh,
fill = "skyblue",
color = "black") +
labs(title = "KWH histogram",
x = "KWH",
y = "Counts") +
scale_x_continuous(labels = scales::comma_format())
rest_cust_fd <- res_cust_forecast_load %>%
as_tsibble(index = year_month) %>%
fill_gaps() %>%
mutate(kwh = ifelse(is.na(kwh), mean(kwh, na.rm = TRUE), kwh))
rest_cust_stl <- rest_cust_fd %>%
model(stl = STL(kwh ~ season(window = "periodic")))
rest_cust_stl %>%
components() %>%
autoplot() +
labs(title = "KWH STL decomposition",
x = "Date by month and year",
y = "KWH") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
respower_la <- rest_cust_fd %>%
features(kwh, features = guerrero) %>%
pull(lambda_guerrero)
aus_box_respower <- rest_cust_fd %>%
mutate(respower_bc = box_cox(kwh, lambda = respower_la))
respower_stl <- aus_box_respower %>%
model(kwh_stl = STL(respower_bc ~ trend() + season(window = "periodic")))
respower_season <- respower_stl %>%
components() %>%
select(year_month, season_adjust = season_adjust)
respower_ets <- respower_season %>%
model(MAM = ETS(season_adjust ~ error("M") + trend("A") + season("N")),
MAdM = ETS(season_adjust ~ error("M") + trend("Ad") + season("N")))
restpower_fc <- respower_ets %>%
forecast(h = "12 months")
restpower_fc %>%
autoplot(respower_season, level=NULL) +
labs(title = "12 month seasonally adjusted forecast for residential power use",
x = "Year",
y = "Adjusted KWH") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
rest_cust_fcs <- rest_cust_fd %>%
model(ARIMA(kwh ~ pdq(0,1,1) + PDQ(0,1,1))) %>%
forecast(h = "12 months")
rest_cust_fcs %>%
autoplot(rest_cust_fd) +
labs(title = "12 month seasonally adjusted forecast for residential power use",
x = "Date",
y = "KWH") +
scale_y_continuous(labels = scales::comma_format()) +
theme_minimal()
rest_cust_prophet <- res_cust_forecast_load %>%
as_tsibble(index = year_month) %>%
fill_gaps() %>%
as_tibble() %>%
rename(ds = year_month, y = kwh) %>%
mutate(y = ifelse(is.na(y), mean(y, na.rm = TRUE), y))
res_cust_pro <- prophet(rest_cust_prophet)
rc_pro_ft <- make_future_dataframe(res_cust_pro, periods = 12, freq = "month")
rc_prophet_fc <- predict(res_cust_pro, rc_pro_ft)
plot(res_cust_pro, rc_prophet_fc)
cat("\n This is a 12 month prophet forecast")
fc_xls <- createWorkbook()
addWorksheet(fc_xls, "ATM1 forecast")
writeData(fc_xls, "ATM1 forecast", atm1_fc)
addWorksheet(fc_xls, "ATM2 forecast")
writeData(fc_xls, "ATM2 forecast", atm2_fc)
addWorksheet(fc_xls, "ATM3 forecast")
writeData(fc_xls, "ATM3 forecast", atm3_fc)
addWorksheet(fc_xls, "ATM4 forecast")
writeData(fc_xls, "ATM4 forecast", atm4_fc)
addWorksheet(fc_xls, "KWH forecast")
writeData(fc_xls, "KWH forecast", restpower_fc)
saveWorkbook(fc_xls, "/Users/uwsthoughts/Desktop/data_624_projectone_fcs_Kevin_Kirby.xlsx", overwrite = TRUE)
